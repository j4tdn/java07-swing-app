/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import common.QuestionAndAnswer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import service.HandleButtonEvents;
import static utils.ComponentUtils.*;

/**
 *
 * @author DangHoang
 */
public class FrMain extends javax.swing.JFrame {

    private final HandleButtonEvents handleButtonEvents;
    private final Font font = new Font("Tahoma", Font.PLAIN, 48);
    private final Icon imagePause = new ImageIcon(getClass().getResource("/images/icons/resume.png"));
//    private final Icon imageContinue = new ImageIcon(getClass().getResource("/images/icons/pause.png"));
    private final Icon iconDogGif = new ImageIcon(getClass().getResource("/images/gif/dog.gif"));
    private final Icon iconClapsGif = new ImageIcon(getClass().getResource("/images/gif/claps04.gif"));
//    private final Dimension defaultDimension = new Dimension(101, 25);
//    private final Dimension dimension = new Dimension(106, 30);
    private final QuestionAndAnswer[] list = QuestionAndAnswer.values();
    private final int lengthOfAnswer = 6;
    private final JButton[] buttons = new JButton[lengthOfAnswer];

    private Image imageQues;
    private Icon icon;
//    private int second = 15;

    /**
     * Creates new form FrMain
     */
    public FrMain() {
        handleButtonEvents = new HandleButtonEvents();

        initComponents();
        initComponentsManually();
        initEvents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnTop = new javax.swing.JPanel();
        btQs1 = new javax.swing.JButton();
        btQs2 = new javax.swing.JButton();
        btQs3 = new javax.swing.JButton();
        btQs4 = new javax.swing.JButton();
        btQs5 = new javax.swing.JButton();
        pnBot = new javax.swing.JPanel();
        btStart = new javax.swing.JButton();
        btOpen = new javax.swing.JButton();
        btReset = new javax.swing.JButton();
        pnCenter = new javax.swing.JPanel();
        pnCenterTop = new javax.swing.JPanel();
        pnCenterLeft = new javax.swing.JPanel();
        lbQuestion = new javax.swing.JLabel();
        lbGif = new javax.swing.JLabel();
        lbTitleColor = new javax.swing.JLabel();
        pnCenterCenter = new javax.swing.JPanel();
        btPause = new javax.swing.JButton();
        lbTime = new javax.swing.JLabel();
        lbClock = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnbTN = new javax.swing.JMenu();
        itGD = new javax.swing.JMenuItem();
        itSK = new javax.swing.JMenuItem();
        sprTN = new javax.swing.JPopupMenu.Separator();
        itCS = new javax.swing.JMenuItem();
        itKH = new javax.swing.JMenuItem();
        mnbTG = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnTop.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 20));

        btQs1.setIcon(new javax.swing.ImageIcon("H:\\java07\\java07-repository-app\\Lesson21-DinhHoang\\target\\classes\\images\\imageButtons\\qstar.png")); // NOI18N
        btQs1.setPreferredSize(new java.awt.Dimension(80, 60));
        pnTop.add(btQs1);

        btQs2.setIcon(new javax.swing.ImageIcon("H:\\java07\\java07-repository-app\\Lesson21-DinhHoang\\target\\classes\\images\\imageButtons\\qrect.png")); // NOI18N
        btQs2.setPreferredSize(new java.awt.Dimension(80, 60));
        pnTop.add(btQs2);

        btQs3.setIcon(new javax.swing.ImageIcon("H:\\java07\\java07-repository-app\\Lesson21-DinhHoang\\target\\classes\\images\\imageButtons\\qtriangle.png")); // NOI18N
        btQs3.setPreferredSize(new java.awt.Dimension(80, 60));
        pnTop.add(btQs3);

        btQs4.setIcon(new javax.swing.ImageIcon("H:\\java07\\java07-repository-app\\Lesson21-DinhHoang\\target\\classes\\images\\imageButtons\\qcircle.png")); // NOI18N
        btQs4.setPreferredSize(new java.awt.Dimension(80, 60));
        pnTop.add(btQs4);

        btQs5.setIcon(new javax.swing.ImageIcon("H:\\java07\\java07-repository-app\\Lesson21-DinhHoang\\target\\classes\\images\\imageButtons\\qspecial.png")); // NOI18N
        btQs5.setPreferredSize(new java.awt.Dimension(80, 60));
        pnTop.add(btQs5);

        getContentPane().add(pnTop, java.awt.BorderLayout.PAGE_START);

        pnBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 15));

        btStart.setIcon(new javax.swing.ImageIcon("H:\\java07\\java07-repository-app\\Lesson21-DinhHoang\\target\\classes\\images\\icons\\defcon.png")); // NOI18N
        btStart.setText("Bắt đầu");
        btStart.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btStart.setPreferredSize(null);
        btStart.setRolloverEnabled(false);
        pnBot.add(btStart);

        btOpen.setIcon(new javax.swing.ImageIcon("H:\\java07\\java07-repository-app\\Lesson21-DinhHoang\\target\\classes\\images\\icons\\defcon.png")); // NOI18N
        btOpen.setText("Mở ô chử");
        btOpen.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btOpen.setPreferredSize(new java.awt.Dimension(101, 25));
        pnBot.add(btOpen);

        btReset.setIcon(new javax.swing.ImageIcon("H:\\java07\\java07-repository-app\\Lesson21-DinhHoang\\target\\classes\\images\\icons\\defcon.png")); // NOI18N
        btReset.setText("Xóa ô chử");
        btReset.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        pnBot.add(btReset);

        getContentPane().add(pnBot, java.awt.BorderLayout.PAGE_END);

        pnCenter.setLayout(new java.awt.BorderLayout());

        pnCenterTop.setBackground(new java.awt.Color(51, 255, 0));
        pnCenterTop.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 60));
        pnCenter.add(pnCenterTop, java.awt.BorderLayout.PAGE_START);

        pnCenterLeft.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbQuestion.setBackground(new java.awt.Color(204, 204, 204));
        pnCenterLeft.add(lbQuestion, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 0, 440, 33));
        pnCenterLeft.add(lbGif, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 51, 166, 151));
        pnCenterLeft.add(lbTitleColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 510, 30));

        pnCenter.add(pnCenterLeft, java.awt.BorderLayout.LINE_START);

        pnCenterCenter.setPreferredSize(new java.awt.Dimension(150, 180));
        pnCenterCenter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        pnCenterCenter.add(btPause, new org.netbeans.lib.awtextra.AbsoluteConstraints(345, 15, -1, -1));

        lbTime.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbTime.setToolTipText("");
        pnCenterCenter.add(lbTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        pnCenterCenter.add(lbClock, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 350, 350));

        pnCenter.add(pnCenterCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnCenter, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(153, 153, 153));

        mnbTN.setText("Tài nguyên");

        itGD.setText("Gia đình");
        mnbTN.add(itGD);

        itSK.setText("Sức khỏe");
        mnbTN.add(itSK);
        mnbTN.add(sprTN);

        itCS.setText("Cuộc sống");
        mnbTN.add(itCS);

        itKH.setText("Khoa học");
        mnbTN.add(itKH);

        jMenuBar1.add(mnbTN);

        mnbTG.setText("Tác giả");
        jMenuBar1.add(mnbTG);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FrMain().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btOpen;
    private javax.swing.JButton btPause;
    private javax.swing.JButton btQs1;
    private javax.swing.JButton btQs2;
    private javax.swing.JButton btQs3;
    private javax.swing.JButton btQs4;
    private javax.swing.JButton btQs5;
    private javax.swing.JButton btReset;
    private javax.swing.JButton btStart;
    private javax.swing.JMenuItem itCS;
    private javax.swing.JMenuItem itGD;
    private javax.swing.JMenuItem itKH;
    private javax.swing.JMenuItem itSK;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lbClock;
    private javax.swing.JLabel lbGif;
    private javax.swing.JLabel lbQuestion;
    private javax.swing.JLabel lbTime;
    private javax.swing.JLabel lbTitleColor;
    private javax.swing.JMenu mnbTG;
    private javax.swing.JMenu mnbTN;
    private javax.swing.JPanel pnBot;
    private javax.swing.JPanel pnCenter;
    private javax.swing.JPanel pnCenterCenter;
    private javax.swing.JPanel pnCenterLeft;
    private javax.swing.JPanel pnCenterTop;
    private javax.swing.JPanel pnTop;
    private javax.swing.JPopupMenu.Separator sprTN;
    // End of variables declaration//GEN-END:variables

    private void initComponentsManually() {
        setExtendedState(FrMain.MAXIMIZED_BOTH);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        pnTop.setPreferredSize(new Dimension(0, 100));
        pnTop.setBackground(Color.WHITE);
        pnBot.setPreferredSize(new Dimension(0, 60));
        pnBot.setBackground(Color.WHITE);
//        btStart.setPreferredSize(defaultDimension);

        pnCenterTop.setPreferredSize(new Dimension(0, 200));
        layoutCenterLeft();
        layoutCenterCenter();

        createButtonQuestions();
    }

    private void layoutCenterLeft() {
        pnCenterLeft.setLayout(null);
        pnCenterLeft.setBackground(Color.WHITE);
        pnCenterLeft.setPreferredSize(new Dimension(920, 0));
        pnCenterLeft.setBorder(BorderFactory.createEtchedBorder());

        lbTitleColor.setBackground(Color.DARK_GRAY);
        lbQuestion.setFont(new Font("Tahoma", Font.PLAIN, 28));

        lbGif.setBounds(350, 100, 180, 180);
        setIcon("/images/gif/dog.png");
    }

    private void layoutCenterCenter() {
        pnCenterCenter.setBorder(BorderFactory.createEtchedBorder());

        Image image = new ImageIcon(getClass().getResource("/images/imageClocks/clock339.jpg"))
                .getImage().getScaledInstance(350, 350, Image.SCALE_SMOOTH);
        lbClock.setIcon(new ImageIcon(image));

        lbTime.setFont(new Font("Tahoma", Font.PLAIN, 100));
        lbTime.setBounds(getPreWidth(pnCenterCenter) / 2, getPreHeight(pnCenterCenter) / 2, 150, 150);
        lbTime.contains(150, 150);

        btPause.setIcon(imagePause);
        btPause.setBounds(250, 10, getPreWidth(btPause), getPreHeight(btPause));
    }

    private void setIcon(String path) {
        imageQues = new ImageIcon(getClass().getResource(path)).getImage()
                .getScaledInstance(lbGif.getWidth(), lbGif.getHeight(), Image.SCALE_SMOOTH);
        icon = new ImageIcon(imageQues);
    }

    private void initEvents() {
        btQuestionEvents();
        btElementEvents();
        btUtilEvents();
        mnBarEvents();
    }

    private void btQuestionEvents() {
        btStarEvent();
        btRectEvent();
        btTriangleEvent();
        btCircleEvent();
        btSpecialEvent();
    }

    private void btStarEvent() {
        btQs1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.processingQuestions(pnCenterTop, pnCenterLeft, buttons, lbQuestion,
                        list[0].getQuestion(), String.valueOf(list[0]), lbGif, icon, btQs1);
            }
        });
    }

    private void btRectEvent() {
        btQs2.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.processingQuestions(pnCenterTop, pnCenterLeft, buttons, lbQuestion,
                        list[1].getQuestion(), String.valueOf(list[1]), lbGif, icon, btQs2);
            }
        });
    }

    private void btTriangleEvent() {
        btQs3.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.processingQuestions(pnCenterTop, pnCenterLeft, buttons, lbQuestion,
                        list[2].getQuestion(), String.valueOf(list[2]), lbGif, icon, btQs3);
            }
        });
    }

    private void btCircleEvent() {
        btQs4.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.processingQuestions(pnCenterTop, pnCenterLeft, buttons, lbQuestion,
                        list[3].getQuestion(), String.valueOf(list[3]), lbGif, icon, btQs4);
            }
        });
    }

    private void btSpecialEvent() {
        btQs5.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.processingQuestions(pnCenterTop, pnCenterLeft, buttons, lbQuestion,
                        list[4].getQuestion(), String.valueOf(list[4]), lbGif, icon, btQs5);
            }
        });
    }

    private void btUtilEvents() {
        btStartEvent();
        btOpenTheBoxEvent();
        btResetEvent();
        btPauseEvent();
    }

    private void createButtonQuestions() {
        for (int i = 0; i < lengthOfAnswer; i++) {
            buttons[i] = new JButton();
            buttons[i].setFont(font);
            buttons[i].setPreferredSize(new Dimension(80, 80));
        }
    }

    private void btElementEvents() {
        buttons[0].addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.buttonTextStatus(buttons[0], 0);
            }
        });

        buttons[1].addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.buttonTextStatus(buttons[1], 1);
            }
        });

        buttons[2].addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.buttonTextStatus(buttons[2], 2);
            }
        });

        buttons[3].addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.buttonTextStatus(buttons[3], 3);
            }
        });

        buttons[4].addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.buttonTextStatus(buttons[4], 4);
            }
        });

        buttons[5].addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.buttonTextStatus(buttons[5], 5);
            }
        });
    }

    private void btStartEvent() {
        btStart.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.handleButtonStartEvent(iconDogGif);
            }

            @Override
            public void mouseExited(MouseEvent e) {
//                btStart.setPreferredSize(defaultDimension);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
//                btStart.setPreferredSize(dimension);
            }
        });
    }

    private void btOpenTheBoxEvent() {
        btOpen.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.handleButtonOpenAllEvent(iconClapsGif);
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }
        });
    }

    private void btResetEvent() {
        btReset.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleButtonEvents.handleButtonResetEvent();
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }
        });
    }

    private void btPauseEvent() {
        btPause.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
            }
        });
    }

    private void mnBarEvents() {
        mnitAuthorEvent();
    }

    private void mnitAuthorEvent() {
        mnbTG.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                JOptionPane.showMessageDialog(null, "AUTHOR: DANG DINH HOANG");
            }
        });
    }
}
